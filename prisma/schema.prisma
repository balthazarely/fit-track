// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  workouts       Workout[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Workout {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime   @default(now())
  userId    String     @db.ObjectId
  title     String
  exercises Exercise[] @relation("WorkoutExercise")
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Exercise {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  // sets      Int
  workoutId String  @db.ObjectId
  workout   Workout @relation("WorkoutExercise", fields: [workoutId], references: [id])
  Sets      Sets[]
}

model Sets {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  reps       Int
  weight     Int
  Exercise   Exercise? @relation(fields: [exerciseId], references: [id])
  exerciseId String?   @db.ObjectId
}
